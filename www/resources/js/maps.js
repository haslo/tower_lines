// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.Map = (function() {
    function Map(game, borderColor, pathColor, width, height) {
      this.game = game;
      this.borderColor = borderColor;
      this.pathColor = pathColor;
      this.width = width;
      this.height = height;
      this.aspectRatio = this.width / this.height;
      this.offset = 5;
    }

    Map.prototype.update = function() {
      return $.noop;
    };

    Map.prototype.initTower = function(tower, index) {
      var coords;
      coords = this.towerPositions()[index];
      return tower.setCoords(coords[0], coords[1]);
    };

    Map.prototype.getGraphics = function() {
      return this.graphics || (this.graphics = this.game.add.graphics(0, 0));
    };

    Map.prototype.clear = function(graphics) {
      if (this.graphics !== void 0) {
        return graphics.clear();
      }
    };

    Map.prototype.draw = function(graphics) {
      this.clear(graphics);
      this.drawBorder(graphics);
      this.drawPaths(graphics);
      return this.drawTowerPlaceholders(graphics);
    };

    Map.prototype.drawBorder = function(graphics) {
      graphics.lineStyle(4, this.borderColor, 1);
      graphics.beginFill(this.borderColor, 0.1);
      graphics.moveTo(this.translateXCoord(this.offset), this.translateYCoord(this.offset));
      graphics.lineTo(this.translateXCoord(this.width - this.offset), this.translateYCoord(this.offset));
      graphics.lineTo(this.translateXCoord(this.width - this.offset), this.translateYCoord(this.height - this.offset));
      graphics.lineTo(this.translateXCoord(this.offset), this.translateYCoord(this.height - this.offset));
      graphics.lineTo(this.translateXCoord(this.offset), this.translateYCoord(this.offset));
      return graphics.endFill();
    };

    Map.prototype.drawPaths = function(graphics) {
      var map;
      map = this;
      graphics.lineStyle(4, this.pathColor, 0.5);
      return $.each(this.pathNodes(), function(pathIndex, path) {
        graphics.moveTo(map.translateXCoord(path[0][0]), map.translateYCoord(path[0][1]));
        return $.each(path, function(coordIndex, coord) {
          if (coordIndex !== 0) {
            return graphics.lineTo(map.translateXCoord(coord[0]), map.translateYCoord(coord[1]));
          }
        });
      });
    };

    Map.prototype.drawTowerPlaceholders = function(graphics) {
      var map;
      map = this;
      return $.each(this.towerPositions(), function(index, position) {
        return new TowerPlaceholderSprite(position[0], position[1]).draw(map, graphics);
      });
    };

    Map.prototype.translateCoords = function(x, y) {
      return [this.translateXCoord(x), this.translateYCoord(y)];
    };

    Map.prototype.translateXCoord = function(coord) {
      return coord * this.pixelScale() + (this.pixelWidth() - this.width * this.pixelScale()) / 2;
    };

    Map.prototype.translateYCoord = function(coord) {
      return coord * this.pixelScale() + (this.pixelHeight() - this.height * this.pixelScale()) / 2;
    };

    Map.prototype.pixelScale = function() {
      var actualAspectRatio;
      actualAspectRatio = this.pixelWidth() / this.pixelHeight();
      if (actualAspectRatio > this.aspectRatio) {
        return this.pixelHeight() / this.height;
      } else {
        return this.pixelWidth() / this.width;
      }
    };

    Map.prototype.pixelWidth = function() {
      if (this.game.width > this.game.height) {
        return this.game.width / 2;
      } else {
        return this.game.width;
      }
    };

    Map.prototype.pixelHeight = function() {
      return this.game.height;
    };

    return Map;

  })();

  this.DefaultMap = (function(_super) {
    __extends(DefaultMap, _super);

    function DefaultMap(game) {
      DefaultMap.__super__.constructor.call(this, game, 0xff0000, 0x00ff00, 200, 300);
    }

    DefaultMap.prototype.towerPositions = function() {
      return [[35, 30], [90, 50], [50, 100], [170, 130], [50, 180], [100, 185], [120, 245]];
    };

    DefaultMap.prototype.pathNodes = function() {
      return [[[50, 2], [70, 60], [25, 70], [30, 171], [40, 252], [145, 271], [165, 298]], [[198, 50], [170, 100], [27, 170], [42, 250], [151, 270], [160, 298]]];
    };

    return DefaultMap;

  })(Map);

}).call(this);
