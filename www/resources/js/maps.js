// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.Map = (function() {
    function Map(game, borderColor, width, height) {
      this.game = game;
      this.borderColor = borderColor;
      this.width = width;
      this.height = height;
      this.aspectRatio = this.width / this.height;
      this.offset = 5;
    }

    Map.prototype.update = function() {
      return $.noop;
    };

    Map.prototype.getGraphics = function() {
      return this.graphics;
    };

    Map.prototype.drawBorder = function() {
      this.graphics || (this.graphics = this.game.add.graphics(0, 0));
      this.graphics.lineStyle(4, this.borderColor, 1);
      this.graphics.beginFill(this.borderColor, 0.1);
      this.graphics.moveTo(this.translateXCoord(this.width, this.height, this.offset), this.translateYCoord(this.width, this.height, this.offset));
      this.graphics.lineTo(this.translateXCoord(this.width, this.height, this.width - this.offset), this.translateYCoord(this.width, this.height, this.offset));
      this.graphics.lineTo(this.translateXCoord(this.width, this.height, this.width - this.offset), this.translateYCoord(this.width, this.height, this.height - this.offset));
      this.graphics.lineTo(this.translateXCoord(this.width, this.height, this.offset), this.translateYCoord(this.width, this.height, this.height - this.offset));
      this.graphics.lineTo(this.translateXCoord(this.width, this.height, this.offset), this.translateYCoord(this.width, this.height, this.offset));
      return this.graphics.endFill();
    };

    Map.prototype.clear = function() {
      if (this.graphics !== void 0) {
        return this.graphics.clear();
      }
    };

    Map.prototype.fitSizeIntoCoords = function(width, height) {
      return [this.translateXCoord(width, height, 0), this.translateYCoord(width, height, 0), this.translateXCoord(width, height, width), this.translateYCoord(width, height, height)];
    };

    Map.prototype.translateXCoord = function(width, height, coord) {
      var desiredWidth;
      desiredWidth = height * this.aspectRatio;
      return (coord - ((width - desiredWidth) / 2)) * this.calculateScale();
    };

    Map.prototype.translateYCoord = function(width, height, coord) {
      var desiredHeight;
      desiredHeight = width / this.aspectRatio;
      console.log([coord, width, height, desiredHeight]);
      return (coord - ((height - desiredHeight) / 2)) * this.calculateScale();
    };

    Map.prototype.calculateScale = function() {
      var actualAspectRatio, height, width;
      width = this.game.width / (this.game.width > this.game.height ? 2 : 1);
      height = this.game.height;
      actualAspectRatio = width / height;
      if (actualAspectRatio > this.aspectRatio) {
        return height / this.height;
      } else {
        return width / this.width;
      }
    };

    return Map;

  })();

  this.DefaultMap = (function(_super) {
    __extends(DefaultMap, _super);

    function DefaultMap(game) {
      DefaultMap.__super__.constructor.call(this, game, 0xff0000, 200, 300);
    }

    DefaultMap.prototype.draw = function() {
      this.clear();
      return this.drawBorder();
    };

    return DefaultMap;

  })(Map);

}).call(this);
