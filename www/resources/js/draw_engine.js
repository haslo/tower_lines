// Generated by CoffeeScript 1.8.0
(function() {
  this.DrawEngine = (function() {
    function DrawEngine(game, map) {
      this.game = game;
      this.map = map;
    }

    DrawEngine.prototype.getSprite = function(key, width, height, functionPointer) {
      var bitmapData;
      if (this.game.cache.getBitmapData(key) === null) {
        bitmapData = this.game.add.bitmapData(width, height);
        functionPointer(bitmapData.context);
        this.game.cache.addBitmapData(key, bitmapData);
      }
      return this.game.cache.getBitmapData(key);
    };

    DrawEngine.prototype.drawLines = function(context, lineWidth, lineColor, linePoints) {
      context.strokeStyle = lineColor;
      context.lineWidth = lineWidth;
      return $.each(linePoints, function(pathIndex, path) {
        context.beginPath();
        context.moveTo(this.map.translateX(path[0][0]), this.map.translateY(path[0][1]));
        $.each(path, function(coordIndex, coord) {
          if (coordIndex !== 0) {
            return context.lineTo(this.map.translateX(coord[0]), this.map.translateY(coord[1]));
          }
        });
        return context.stroke();
      });
    };

    DrawEngine.prototype.drawSolid = function(context, lineWidth, lineColor, fillColor, linePoints) {
      context.strokeStyle = lineColor;
      context.lineWidth = lineWidth;
      context.fillStyle = fillColor;
      return $.each(linePoints, function(pathIndex, path) {
        context.beginPath();
        context.moveTo(this.map.translateX(path[0][0]), this.map.translateY(path[0][1]));
        $.each(path, function(coordIndex, coord) {
          if (coordIndex !== 0) {
            return context.lineTo(this.map.translateX(coord[0]), this.map.translateY(coord[1]));
          }
        });
        context.closePath();
        context.stroke();
        return context.fill();
      });
    };

    return DrawEngine;

  })();

}).call(this);
