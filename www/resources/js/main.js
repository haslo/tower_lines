// Generated by CoffeeScript 1.8.0
(function() {


}).call(this);
// Generated by CoffeeScript 1.8.0
(function() {
  var Sprite,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Sprite = (function() {
    function Sprite() {}

    Sprite.prototype.moveTo = function(map, x, y) {
      var coords;
      coords = map.mapCoords(x + this.x, y + this.y);
      return map.getGraphics().moveTo(coords[0], coords[1]);
    };

    Sprite.prototype.lineTo = function(map, x, y) {
      var coords;
      coords = map.mapCoords(x + this.x, y + this.y);
      return map.getGraphics().lineTo(coords[0], coords[1]);
    };

    return Sprite;

  })();

  this.TowerSprite = (function(_super) {
    __extends(TowerSprite, _super);

    function TowerSprite(x, y) {
      this.x = x;
      this.y = y;
    }

    TowerSprite.prototype.draw = function(map) {
      var color, scale;
      scale = map.calculateScale();
      color = 0x0000ff;
      map.getGraphics().lineStyle(2, color, 1);
      map.getGraphics().beginFill(color, 0.4);
      this.moveTo(map, 10, 10);
      this.lineTo(map, -10, 10);
      this.lineTo(map, -8, -5);
      this.lineTo(map, -8, -10);
      this.lineTo(map, 8, -10);
      this.lineTo(map, 8, -5);
      this.lineTo(map, 10, 10);
      return map.getGraphics().endFill();
    };

    return TowerSprite;

  })(Sprite);

}).call(this);
// Generated by CoffeeScript 1.8.0
(function() {
  var Map,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Map = (function() {
    function Map(game, borderColor, width, height) {
      this.game = game;
      this.borderColor = borderColor;
      this.width = width;
      this.height = height;
      this.aspectRatio = this.width / this.height;
      this.offset = 5;
    }

    Map.prototype.getGraphics = function() {
      return this.graphics;
    };

    Map.prototype.drawBorder = function() {
      var size;
      this.graphics || (this.graphics = this.game.add.graphics(0, 0));
      this.graphics.lineStyle(4, this.borderColor, 1);
      this.graphics.beginFill(this.borderColor, 0.1);
      size = this.calculateSize();
      this.graphics.moveTo(size[0], size[1]);
      this.graphics.lineTo(size[2], size[1]);
      this.graphics.lineTo(size[2], size[3]);
      this.graphics.lineTo(size[0], size[3]);
      this.graphics.lineTo(size[0], size[1]);
      return this.graphics.endFill();
    };

    Map.prototype.clear = function() {
      if (this.graphics !== void 0) {
        return this.graphics.clear();
      }
    };

    Map.prototype.calculateSize = function() {
      if (this.game.width > this.game.height) {
        return this.fitSizeIntoCoords(this.game.width / 2, this.game.height);
      } else {
        return this.fitSizeIntoCoords(this.game.width, this.game.height);
      }
    };

    Map.prototype.fitSizeIntoCoords = function(width, height) {
      var actualAspectRatio, desiredHeight, desiredWidth;
      actualAspectRatio = width / height;
      if (actualAspectRatio > this.aspectRatio) {
        desiredWidth = height * this.aspectRatio;
        return [((width - desiredWidth) / 2) + this.offset, this.offset, width - ((width - desiredWidth) / 2) - this.offset, height - this.offset];
      } else {
        desiredHeight = width / this.aspectRatio;
        return [this.offset, ((height - desiredHeight) / 2) + this.offset, width - this.offset, height - ((height - desiredHeight) / 2) - this.offset];
      }
    };

    Map.prototype.resize = function() {
      return this.mappers = {};
    };

    Map.prototype.mapCoords = function(x, y) {
      var actualAspectRatio, height, originX, originY, scaleX, scaleY, width;
      this.mappers || (this.mappers = {});
      width = this.game.width > this.game.height ? this.game.width / 2 : this.game.width;
      height = this.game.height;
      actualAspectRatio = width / height;
      if (this.mappers['x'] === void 0) {
        originX = actualAspectRatio > this.aspectRatio ? (width - (height * this.aspectRatio)) / 2 + this.offset : this.offset;
        scaleX = this.calculateScale();
        this.mappers['x'] = function(x) {
          return originX + x * scaleX;
        };
      }
      if (this.mappers['y'] === void 0) {
        originY = actualAspectRatio > this.aspectRatio ? this.offset : (height - (width / this.aspectRatio)) / 2 + this.offset;
        scaleY = this.calculateScale();
        this.mappers['y'] = function(y) {
          return originY + y * scaleY;
        };
      }
      return [this.mappers['x'](x), this.mappers['y'](y)];
    };

    Map.prototype.calculateScale = function() {
      var actualAspectRatio, height, width;
      width = this.game.width > this.game.height ? this.game.width / 2 : this.game.width;
      height = this.game.height;
      actualAspectRatio = width / height;
      if (actualAspectRatio > this.aspectRatio) {
        return (height - 2 * this.offset) / this.height;
      } else {
        return (width - 2 * this.offset) / this.width;
      }
    };

    return Map;

  })();

  this.DefaultMap = (function(_super) {
    __extends(DefaultMap, _super);

    function DefaultMap(game) {
      DefaultMap.__super__.constructor.call(this, game, 0xff0000, 200, 300);
    }

    DefaultMap.prototype.draw = function() {
      this.clear();
      this.drawBorder();
      new TowerSprite(30, 30).draw(this);
      new TowerSprite(50, 100).draw(this);
      new TowerSprite(180, 200).draw(this);
      return new TowerSprite(30, 250).draw(this);
    };

    return DefaultMap;

  })(Map);

}).call(this);
// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.TowerLines = (function() {
    function TowerLines() {
      this.resizeGame = __bind(this.resizeGame, this);
      this.createListener = __bind(this.createListener, this);
      this.onDeviceReady = __bind(this.onDeviceReady, this);
    }

    TowerLines.prototype.initialize = function() {
      return this.bindEvents(this);
    };

    TowerLines.prototype.bindEvents = function() {
      return document.addEventListener('deviceready', this.onDeviceReady, false);
    };

    TowerLines.prototype.onDeviceReady = function() {
      var height, listeners, width;
      width = document.body.offsetWidth;
      height = Math.max($(document).height(), $(window).height());
      listeners = {
        create: this.createListener
      };
      this.game = new Phaser.Game(width, height, Phaser.AUTO, '', listeners);
      return $(window).resize((function(_this) {
        return function() {
          return _this.resizeGame(_this);
        };
      })(this));
    };

    TowerLines.prototype.createListener = function() {
      console.log('listening');
      this.map || (this.map = new DefaultMap(this.game));
      return this.map.draw();
    };

    TowerLines.prototype.resizeGame = function() {
      var height, width;
      height = $(window).height();
      width = $(window).width();
      this.game.width = width;
      this.game.height = height;
      this.game.stage.bounds.width = width;
      this.game.stage.bounds.height = height;
      if (this.game.renderType === Phaser.WEBGL) {
        this.game.renderer.resize(width, height);
      }
      this.map.resize();
      return this.map.draw();
    };

    return TowerLines;

  })();

}).call(this);
