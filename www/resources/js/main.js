// Generated by CoffeeScript 1.8.0
(function() {
  this.DrawEngine = (function() {
    function DrawEngine(game, map) {
      this.game = game;
      this.map = map;
    }

    DrawEngine.prototype.getSprite = function(key, width, height, functionPointer) {
      var bitmapData;
      if (this.game.cache.getBitmapData(key) === null) {
        bitmapData = this.game.add.bitmapData(width, height);
        functionPointer(bitmapData.context);
        this.game.cache.addBitmapData(key, bitmapData);
      }
      return this.game.cache.getBitmapData(key);
    };

    DrawEngine.prototype.drawLines = function(context, lineWidth, lineColor, linePoints) {
      context.strokeStyle = lineColor;
      context.lineWidth = lineWidth;
      return $.each(linePoints, function(pathIndex, path) {
        context.beginPath();
        context.moveTo(this.map.translateX(path[0][0]), this.map.translateY(path[0][1]));
        $.each(path, function(coordIndex, coord) {
          if (coordIndex !== 0) {
            return context.lineTo(this.map.translateX(coord[0]), this.map.translateY(coord[1]));
          }
        });
        return context.stroke();
      });
    };

    DrawEngine.prototype.drawSolid = function(context, lineWidth, lineColor, fillColor, linePoints) {
      context.strokeStyle = lineColor;
      context.lineWidth = lineWidth;
      context.fillStyle = fillColor;
      return $.each(linePoints, function(pathIndex, path) {
        context.beginPath();
        context.moveTo(this.map.translateX(path[0][0]), this.map.translateY(path[0][1]));
        $.each(path, function(coordIndex, coord) {
          if (coordIndex !== 0) {
            return context.lineTo(this.map.translateX(coord[0]), this.map.translateY(coord[1]));
          }
        });
        context.closePath();
        context.stroke();
        return context.fill();
      });
    };

    return DrawEngine;

  })();

}).call(this);
// Generated by CoffeeScript 1.8.0
(function() {
  var Sprite,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Sprite = (function() {
    function Sprite(x, y, dips) {
      this.x = x;
      this.y = y;
      this.dips = dips;
    }

    return Sprite;

  })();

  this.TowerPlaceholderSprite = (function(_super) {
    __extends(TowerPlaceholderSprite, _super);

    function TowerPlaceholderSprite() {
      return TowerPlaceholderSprite.__super__.constructor.apply(this, arguments);
    }

    TowerPlaceholderSprite.prototype.draw = function(map, graphics) {
      var color;
      color = 0xaa0000;
      graphics.lineStyle(2 * this.dips, color, 1);
      this.moveTo(map, graphics, 9, 9);
      this.lineTo(map, graphics, -9, 9);
      this.lineTo(map, graphics, -9, -9);
      this.lineTo(map, graphics, 9, -9);
      return this.lineTo(map, graphics, 9, 9);
    };

    return TowerPlaceholderSprite;

  })(Sprite);

  this.DefaultTowerSprite = (function(_super) {
    __extends(DefaultTowerSprite, _super);

    function DefaultTowerSprite() {
      return DefaultTowerSprite.__super__.constructor.apply(this, arguments);
    }

    DefaultTowerSprite.prototype.draw = function(map, graphics) {
      var color;
      color = 0x0000ff;
      graphics.lineStyle(2 * this.dips, color, 1);
      graphics.beginFill(color, 0.4);
      this.moveTo(map, graphics, 10, 10);
      this.lineTo(map, graphics, -10, 10);
      this.lineTo(map, graphics, -8, -5);
      this.lineTo(map, graphics, -8, -10);
      this.lineTo(map, graphics, -2, -10);
      this.lineTo(map, graphics, 0, -13);
      this.lineTo(map, graphics, 2, -10);
      this.lineTo(map, graphics, 8, -10);
      this.lineTo(map, graphics, 8, -5);
      this.lineTo(map, graphics, 10, 10);
      return graphics.endFill();
    };

    return DefaultTowerSprite;

  })(Sprite);

}).call(this);
// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.Map = (function() {
    function Map(game, borderColor, pathColor, width, height) {
      this.game = game;
      this.borderColor = borderColor;
      this.pathColor = pathColor;
      this.width = width;
      this.height = height;
      this.aspectRatio = this.width / this.height;
      this.offset = 5;
    }

    Map.prototype.update = function() {
      return $.noop;
    };

    Map.prototype.initTower = function(tower, index) {
      var coords;
      coords = this.towerPositions()[index];
      return tower.setCoords(coords[0], coords[1]);
    };

    Map.prototype.draw = function(graphics, dips) {
      this.drawBorder(graphics, dips);
      this.drawPaths(graphics, dips);
      return this.drawTowerPlaceholders(graphics, dips);
    };

    Map.prototype.drawBorder = function(graphics, dips) {
      graphics.lineStyle(4 * dips, this.borderColor, 1);
      graphics.beginFill(this.borderColor, 0.1);
      graphics.moveTo(this.translateX(this.offset), this.translateY(this.offset));
      graphics.lineTo(this.translateX(this.width - this.offset), this.translateY(this.offset));
      graphics.lineTo(this.translateX(this.width - this.offset), this.translateY(this.height - this.offset));
      graphics.lineTo(this.translateX(this.offset), this.translateY(this.height - this.offset));
      graphics.lineTo(this.translateX(this.offset), this.translateY(this.offset));
      return graphics.endFill();
    };

    Map.prototype.drawPaths = function(graphics, dips) {
      var map;
      map = this;
      graphics.lineStyle(4 * dips, this.pathColor, 0.5);
      return $.each(this.pathNodes(), function(pathIndex, path) {
        graphics.moveTo(map.translateX(path[0][0]), map.translateY(path[0][1]));
        return $.each(path, function(coordIndex, coord) {
          if (coordIndex !== 0) {
            return graphics.lineTo(map.translateX(coord[0]), map.translateY(coord[1]));
          }
        });
      });
    };

    Map.prototype.drawTowerPlaceholders = function(graphics, dips) {
      var map;
      map = this;
      return $.each(this.towerPositions(), function(index, position) {
        var sprite;
        sprite = new TowerPlaceholderSprite(position[0], position[1], dips);
        return sprite.draw(map, graphics);
      });
    };

    Map.prototype.translateCoords = function(x, y) {
      return [this.translateX(x), this.translateY(y)];
    };

    Map.prototype.translateX = function(coord) {
      return coord * this.pixelScale() + (this.pixelWidth() - this.width * this.pixelScale()) / 2;
    };

    Map.prototype.translateY = function(coord) {
      return coord * this.pixelScale() + (this.pixelHeight() - this.height * this.pixelScale()) / 2;
    };

    Map.prototype.pixelScale = function() {
      var actualAspectRatio;
      actualAspectRatio = this.pixelWidth() / this.pixelHeight();
      if (actualAspectRatio > this.aspectRatio) {
        return this.pixelHeight() / this.height;
      } else {
        return this.pixelWidth() / this.width;
      }
    };

    Map.prototype.pixelWidth = function() {
      if (this.game.width > this.game.height) {
        return this.game.width / 2;
      } else {
        return this.game.width;
      }
    };

    Map.prototype.pixelHeight = function() {
      return this.game.height;
    };

    return Map;

  })();

  this.DefaultMap = (function(_super) {
    __extends(DefaultMap, _super);

    function DefaultMap(game) {
      DefaultMap.__super__.constructor.call(this, game, 0xff0000, 0x00ff00, 200, 300);
    }

    DefaultMap.prototype.towerPositions = function() {
      return [[35, 30], [90, 50], [50, 100], [170, 130], [50, 180], [100, 185], [120, 245]];
    };

    DefaultMap.prototype.pathNodes = function() {
      return [[[50, 2], [70, 60], [25, 70], [30, 171], [40, 252], [145, 271], [165, 298]], [[198, 50], [170, 100], [27, 170], [42, 250], [151, 270], [160, 298]]];
    };

    return DefaultMap;

  })(Map);

}).call(this);
// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.Tower = (function() {
    function Tower(index) {
      this.index = index;
    }

    Tower.prototype.index = function() {
      return this.index;
    };

    Tower.prototype.setCoords = function(x, y) {
      this.x = x;
      return this.y = y;
    };

    return Tower;

  })();

  this.DefaultTower = (function(_super) {
    __extends(DefaultTower, _super);

    function DefaultTower() {
      return DefaultTower.__super__.constructor.apply(this, arguments);
    }

    DefaultTower.prototype.draw = function(map, graphics, dips) {
      return new DefaultTowerSprite(this.x, this.y, dips).draw(map, graphics);
    };

    return DefaultTower;

  })(Tower);

}).call(this);
// Generated by CoffeeScript 1.8.0
(function() {
  this.Mob = (function() {
    function Mob(index) {
      this.index = index;
    }

    Mob.prototype.index = function() {
      return this.index;
    };

    Mob.prototype.update = function() {
      return $.noop;
    };

    return Mob;

  })();

}).call(this);
// Generated by CoffeeScript 1.8.0
(function() {
  this.World = (function() {
    function World(game, map, dips) {
      this.game = game;
      this.map = map;
      this.dips = dips;
      this.towers = [];
      this.mobs = [];
    }

    World.prototype.add = function(item) {
      if (item instanceof Tower) {
        this.map.initTower(item, item.index);
        this.towers.push(item);
      }
      if (item instanceof Mob) {
        this.map.initMob(item, item.index);
        this.mobs.push(item);
      }
      return item.map = this.map;
    };

    World.prototype.update = function() {
      var map;
      map = this.map;
      map.update();
      $.each(this.towers, function(_, tower) {
        return tower.update(map);
      });
      return $.each(this.mobs, function(_, mob) {
        return mob.update(map);
      });
    };

    World.prototype.draw = function() {
      var dips, map;
      map = this.map;
      dips = this.dips;
      map.draw(dips);
      $.each(this.towers, function(_, tower) {
        return tower.draw(dips);
      });
      return $.each(this.mobs, function(_, mob) {
        return mob.draw(dips);
      });
    };

    return World;

  })();

}).call(this);
// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.TowerLines = (function() {
    function TowerLines() {
      this.initWorld = __bind(this.initWorld, this);
      this.initGame = __bind(this.initGame, this);
      this.create = __bind(this.create, this);
      this.resizeGame = __bind(this.resizeGame, this);
      this.onDeviceReady = __bind(this.onDeviceReady, this);
    }

    TowerLines.prototype.initialize = function() {
      return this.bindEvents(this);
    };

    TowerLines.prototype.bindEvents = function() {
      return document.addEventListener('deviceready', this.onDeviceReady, false);
    };

    TowerLines.prototype.onDeviceReady = function() {
      var dips, height, width;
      width = document.body.offsetWidth;
      height = Math.max($(document).height(), $(window).height());
      dips = window.devicePixelRatio;
      this.game = new Phaser.Game(width * dips, height * dips, Phaser.AUTO, '', {
        create: this.create
      });
      return $(window).resize((function(_this) {
        return function() {
          return _this.resizeGame(_this);
        };
      })(this));
    };

    TowerLines.prototype.resizeGame = function() {
      var dips, height, width;
      height = $(window).height();
      width = $(window).width();
      dips = window.devicePixelRatio;
      this.game.width = width * dips;
      this.game.height = height * dips;
      if (this.game.renderType === Phaser.WEBGL) {
        this.game.renderer.resize(width * dips, height * dips);
      }
      this.world.invalidateCaches();
      return this.world.draw();
    };

    TowerLines.prototype.create = function() {
      this.initGame();
      return this.initWorld();
    };

    TowerLines.prototype.initGame = function() {
      var callback;
      this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.setShowAll();
      this.game.physics.startSystem(Phaser.Physics.ARCADE);
      callback = function(scale, prevOrientation) {
        return alert(prevOrientation);
      };
      return this.game.scale.onOrientationChange.add(callback);
    };

    TowerLines.prototype.initWorld = function() {
      this.world = new World(this.game, new DefaultMap(this.game), window.devicePixelRatio);
      this.world.add(new DefaultTower(0));
      this.world.add(new DefaultTower(1));
      return this.world.draw();
    };

    return TowerLines;

  })();

}).call(this);
